// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "m_add.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic m_add::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic m_add::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> m_add::ap_ST_fsm_state1 = "1";
const sc_lv<4> m_add::ap_ST_fsm_state2 = "10";
const sc_lv<4> m_add::ap_ST_fsm_state3 = "100";
const sc_lv<4> m_add::ap_ST_fsm_state4 = "1000";
const sc_lv<32> m_add::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> m_add::ap_const_lv32_1 = "1";
const sc_lv<1> m_add::ap_const_lv1_0 = "0";
const sc_lv<32> m_add::ap_const_lv32_2 = "10";
const sc_lv<3> m_add::ap_const_lv3_0 = "000";
const sc_lv<1> m_add::ap_const_lv1_1 = "1";
const sc_lv<32> m_add::ap_const_lv32_3 = "11";
const sc_lv<3> m_add::ap_const_lv3_4 = "100";
const sc_lv<3> m_add::ap_const_lv3_1 = "1";
const sc_lv<2> m_add::ap_const_lv2_0 = "00";
const bool m_add::ap_const_boolean_1 = true;

m_add::m_add(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln10_1_fu_134_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln10_1_fu_134_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add_ln10_1_fu_129_p2);
    sensitive << ( zext_ln9_reg_155 );
    sensitive << ( zext_ln10_fu_125_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_89_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_89_p2 );

    SC_METHOD(thread_i_fu_95_p2);
    sensitive << ( i_0_reg_67 );

    SC_METHOD(thread_icmp_ln8_fu_89_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_67 );

    SC_METHOD(thread_icmp_ln9_fu_113_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_j_fu_119_p2);
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_result_address0);
    sensitive << ( zext_ln10_1_reg_168 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_result_d0);
    sensitive << ( A_q0 );
    sensitive << ( B_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_result_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_fu_101_p3);
    sensitive << ( i_0_reg_67 );

    SC_METHOD(thread_zext_ln10_1_fu_134_p1);
    sensitive << ( add_ln10_1_fu_129_p2 );

    SC_METHOD(thread_zext_ln10_fu_125_p1);
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_zext_ln9_fu_109_p1);
    sensitive << ( tmp_fu_101_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_89_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln9_fu_113_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "m_add_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, result_address0, "(port)result_address0");
    sc_trace(mVcdFile, result_ce0, "(port)result_ce0");
    sc_trace(mVcdFile, result_we0, "(port)result_we0");
    sc_trace(mVcdFile, result_d0, "(port)result_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_95_p2, "i_fu_95_p2");
    sc_trace(mVcdFile, i_reg_150, "i_reg_150");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln9_fu_109_p1, "zext_ln9_fu_109_p1");
    sc_trace(mVcdFile, zext_ln9_reg_155, "zext_ln9_reg_155");
    sc_trace(mVcdFile, icmp_ln8_fu_89_p2, "icmp_ln8_fu_89_p2");
    sc_trace(mVcdFile, j_fu_119_p2, "j_fu_119_p2");
    sc_trace(mVcdFile, j_reg_163, "j_reg_163");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln10_1_fu_134_p1, "zext_ln10_1_fu_134_p1");
    sc_trace(mVcdFile, zext_ln10_1_reg_168, "zext_ln10_1_reg_168");
    sc_trace(mVcdFile, icmp_ln9_fu_113_p2, "icmp_ln9_fu_113_p2");
    sc_trace(mVcdFile, i_0_reg_67, "i_0_reg_67");
    sc_trace(mVcdFile, j_0_reg_78, "j_0_reg_78");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_101_p3, "tmp_fu_101_p3");
    sc_trace(mVcdFile, zext_ln10_fu_125_p1, "zext_ln10_fu_125_p1");
    sc_trace(mVcdFile, add_ln10_1_fu_129_p2, "add_ln10_1_fu_129_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("m_add.hdltvin.dat");
    mHdltvoutHandle.open("m_add.hdltvout.dat");
}

m_add::~m_add() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void m_add::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_113_p2.read(), ap_const_lv1_1))) {
        i_0_reg_67 = i_reg_150.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_67 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_89_p2.read(), ap_const_lv1_0))) {
        j_0_reg_78 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_78 = j_reg_163.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_150 = i_fu_95_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_163 = j_fu_119_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_113_p2.read()))) {
        zext_ln10_1_reg_168 = zext_ln10_1_fu_134_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_89_p2.read(), ap_const_lv1_0))) {
        zext_ln9_reg_155 = zext_ln9_fu_109_p1.read();
    }
}

void m_add::thread_A_address0() {
    A_address0 =  (sc_lv<4>) (zext_ln10_1_fu_134_p1.read());
}

void m_add::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void m_add::thread_B_address0() {
    B_address0 =  (sc_lv<4>) (zext_ln10_1_fu_134_p1.read());
}

void m_add::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void m_add::thread_add_ln10_1_fu_129_p2() {
    add_ln10_1_fu_129_p2 = (!zext_ln9_reg_155.read().is_01() || !zext_ln10_fu_125_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln9_reg_155.read()) + sc_biguint<6>(zext_ln10_fu_125_p1.read()));
}

void m_add::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void m_add::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void m_add::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void m_add::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void m_add::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void m_add::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void m_add::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void m_add::thread_i_fu_95_p2() {
    i_fu_95_p2 = (!i_0_reg_67.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_67.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void m_add::thread_icmp_ln8_fu_89_p2() {
    icmp_ln8_fu_89_p2 = (!i_0_reg_67.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_67.read() == ap_const_lv3_4);
}

void m_add::thread_icmp_ln9_fu_113_p2() {
    icmp_ln9_fu_113_p2 = (!j_0_reg_78.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_78.read() == ap_const_lv3_4);
}

void m_add::thread_j_fu_119_p2() {
    j_fu_119_p2 = (!j_0_reg_78.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_78.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void m_add::thread_result_address0() {
    result_address0 =  (sc_lv<4>) (zext_ln10_1_reg_168.read());
}

void m_add::thread_result_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        result_ce0 = ap_const_logic_1;
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void m_add::thread_result_d0() {
    result_d0 = (!B_q0.read().is_01() || !A_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(B_q0.read()) + sc_biguint<32>(A_q0.read()));
}

void m_add::thread_result_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        result_we0 = ap_const_logic_1;
    } else {
        result_we0 = ap_const_logic_0;
    }
}

void m_add::thread_tmp_fu_101_p3() {
    tmp_fu_101_p3 = esl_concat<3,2>(i_0_reg_67.read(), ap_const_lv2_0);
}

void m_add::thread_zext_ln10_1_fu_134_p1() {
    zext_ln10_1_fu_134_p1 = esl_zext<64,6>(add_ln10_1_fu_129_p2.read());
}

void m_add::thread_zext_ln10_fu_125_p1() {
    zext_ln10_fu_125_p1 = esl_zext<6,3>(j_0_reg_78.read());
}

void m_add::thread_zext_ln9_fu_109_p1() {
    zext_ln9_fu_109_p1 = esl_zext<6,5>(tmp_fu_101_p3.read());
}

void m_add::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_89_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_113_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void m_add::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address0\" :  \"" << result_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce0\" :  \"" << result_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we0\" :  \"" << result_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d0\" :  \"" << result_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

