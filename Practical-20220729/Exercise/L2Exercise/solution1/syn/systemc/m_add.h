// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _m_add_HH_
#define _m_add_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct m_add : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<4> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<4> > result_address0;
    sc_out< sc_logic > result_ce0;
    sc_out< sc_logic > result_we0;
    sc_out< sc_lv<32> > result_d0;


    // Module declarations
    m_add(sc_module_name name);
    SC_HAS_PROCESS(m_add);

    ~m_add();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_95_p2;
    sc_signal< sc_lv<3> > i_reg_150;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > zext_ln9_fu_109_p1;
    sc_signal< sc_lv<6> > zext_ln9_reg_155;
    sc_signal< sc_lv<1> > icmp_ln8_fu_89_p2;
    sc_signal< sc_lv<3> > j_fu_119_p2;
    sc_signal< sc_lv<3> > j_reg_163;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln10_1_fu_134_p1;
    sc_signal< sc_lv<64> > zext_ln10_1_reg_168;
    sc_signal< sc_lv<1> > icmp_ln9_fu_113_p2;
    sc_signal< sc_lv<3> > i_0_reg_67;
    sc_signal< sc_lv<3> > j_0_reg_78;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > tmp_fu_101_p3;
    sc_signal< sc_lv<6> > zext_ln10_fu_125_p1;
    sc_signal< sc_lv<6> > add_ln10_1_fu_129_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_add_ln10_1_fu_129_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_95_p2();
    void thread_icmp_ln8_fu_89_p2();
    void thread_icmp_ln9_fu_113_p2();
    void thread_j_fu_119_p2();
    void thread_result_address0();
    void thread_result_ce0();
    void thread_result_d0();
    void thread_result_we0();
    void thread_tmp_fu_101_p3();
    void thread_zext_ln10_1_fu_134_p1();
    void thread_zext_ln10_fu_125_p1();
    void thread_zext_ln9_fu_109_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
